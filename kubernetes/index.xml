<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kubernetes on K8s Learning</title><link>https://lingsamuel.github.io/k8s-book/kubernetes/</link><description>Recent content in Kubernetes on K8s Learning</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://lingsamuel.github.io/k8s-book/kubernetes/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://lingsamuel.github.io/k8s-book/kubernetes/basic/architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lingsamuel.github.io/k8s-book/kubernetes/basic/architecture/</guid><description/></item><item><title/><link>https://lingsamuel.github.io/k8s-book/kubernetes/basic/components/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lingsamuel.github.io/k8s-book/kubernetes/basic/components/</guid><description>Basic Components # Kubernetes 基本组件：
kubelet: kubelet 运行在所有节点上，扮演着“节点代理”的角色。kubelet 还向 apiserver 注册节点的各种信息。
kubelet 主要的交互对象是 PodSpec，PodSpec 来自于各种各样的机制与组件，主要来自于 apiserver。它还监视容器的运行与健康状态。
kube-apiserver: apiserver 校验、配置各种 API 对象，例如 Pod、Service、ReplicaSet 等。
apiserver 还提供 REST API，并且为各个组件提供集群共享状态的前端。所有其他组件都应该通过这个前端进行交互。
kube-proxy: kube-proxy 也应该运行在所有节点上。kube-proxy 提供了服务代理。
kube-scheduler: kube-scheduler 是一种“控制平面”（Control Plane），它根据资源限制决定将队列中的 Pod 调度给哪个节点。
不同的调度器可以共同在一个集群中使用，kube-scheduler 是参考实现。</description></item><item><title/><link>https://lingsamuel.github.io/k8s-book/kubernetes/concept/informer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lingsamuel.github.io/k8s-book/kubernetes/concept/informer/</guid><description>Informer #</description></item><item><title/><link>https://lingsamuel.github.io/k8s-book/kubernetes/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lingsamuel.github.io/k8s-book/kubernetes/introduction/</guid><description>README # 本文开始编写时，源码拉取于 2020 年 11 月 1 日。不排除后续有新拉取。
本文粘贴的所有代码都是删减过的，不保证没有语法错误。</description></item><item><title/><link>https://lingsamuel.github.io/k8s-book/kubernetes/kube-scheduler/startup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lingsamuel.github.io/k8s-book/kubernetes/kube-scheduler/startup/</guid><description>Kube Scheduler Startup # 由于 kube-scheduler 是项目中后期才拆分出来的，所以结构也相对简单。
启动时主要工作便是运行 scheduleOne 函数，从队列中不断地获取需要调度的 pod。
mermaid.initialize({ "flowchart": { "useMaxWidth":true }, "theme": "default" } ) sequenceDiagram participant main as cmd/kube-scheduler/scheduler.go participant server as cmd/kube-scheduler/app/server.go participant sched as pkg/scheduler/scheduler.go participant q as pkg/scheduler/internal/queue/scheduling_queue.go main--server: NewSchedulerCommand() server--server: runCommand()Setup()Run() server--sched: Run() sched--q: Run() par loop Cleaner q--q: flushBackoffQCompleted() q--q: flushUnschedulableQLeftover() end par loop Main sched--sched: scheduleOne() end scheduleOne 函数主要工作就是从队列中提取 pod 的信息，然后执行 Scheduling Framework 中的 Scheduling Cycle 和 Binding Cycle。</description></item><item><title/><link>https://lingsamuel.github.io/k8s-book/kubernetes/kubelet/startup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lingsamuel.github.io/k8s-book/kubernetes/kubelet/startup/</guid><description>Kubelet Startup # Kubelet 的起始源码按照惯例位于 cmd/kubelet/kubelet.go，本质上是对 pkg/kubelet/kubelet.go 的封装。
Kubelet startup:
mermaid.initialize({ "flowchart": { "useMaxWidth":true }, "theme": "default" } ) sequenceDiagram participant main as cmd/kubelet/kubelet.go participant server as cmd/kubelet/app/server.go participant kubelet as pkg/kubelet/kubelet.go participant cfg as pkg/kubelet/config/config.go participant lw as ListAndWatch main--server: NewKubeletCommand() server--server: Run()RunKubelet()createAndInitKubelet() server--+kubelet: NewMainKubelet() kubelet--+cfg: NewPodConfig() cfg--+lw: NewSourceApiserver() lw---cfg: Channel cfg---kubelet: *PodConfig kubelet---server: *Kubelet #server--kubelet: StartGarbageCollection server--server: startKubelet() server--kubelet: go Run() par loop Events from *PodConfig lw--kubelet: Events kubelet--kubelet: syncLoop end server--kubelet: go ListenAndServe() Kubelet 的核心组件（在 NewMainKubelet 中初始化）包括但不限于：</description></item></channel></rss>